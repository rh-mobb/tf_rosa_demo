#!/bin/bash

rosa login --token $ROSA_OFFLINE_ACCESS_TOKEN
#  rosa link user-role --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:user/thatcher-mobb

rosa create cluster \
--color never \
--cluster-name=${cluster_name} \
%{ if sts == true ~}
--sts \
%{ endif ~}
%{ if contains(["private"], network_type) ~}
--private \
%{ endif ~}
%{ if contains(["privatelink"], network_type) ~}
--private-link \
%{ endif ~}
%{ if length(subnet_ids) >= 3 ~}
--multi-az \
%{ endif ~}
--role-arn arn:aws:iam::${ aws_account_id }:role/ManagedOpenShift-Installer-Role \
--support-role-arn arn:aws:iam::${ aws_account_id }:role/ManagedOpenShift-Support-Role \
--controlplane-iam-role arn:aws:iam::${ aws_account_id }:role/ManagedOpenShift-ControlPlane-Role \
--worker-iam-role arn:aws:iam::${ aws_account_id }:role/ManagedOpenShift-Worker-Role \
%{ if external_id != "" ~}
--external-id ${ external_id } \
%{ endif ~}
--region ${ aws_region } \
--version ${ ocp_version } \
--compute-nodes ${ compute_node_count } \
--compute-machine-type ${ compute_node_instance_type } \
--machine-cidr ${ machine_cidr_block } \
--service-cidr 172.30.0.0/16 \
--pod-cidr 10.128.0.0/14 \
--host-prefix ${ host_prefix } \
--subnet-ids ${ join(",", subnet_ids) } \
--yes 2>&1 %{ if debug == true }| tee rosa_create_cluster.log%{ endif }

if [ $? -eq 0 ]; then
    rosa create operator-roles --mode auto --yes --cluster ${cluster_name} 2>&1 %{ if debug == true }| tee rosa_create_roles.log%{ endif }
    rosa create oidc-provider --mode auto --yes --cluster ${cluster_name} 2>&1 %{ if debug == true }| tee rosa_create_oidc.log%{ endif }
    rosa logs install --cluster ${cluster_name} --watch
    rosa describe cluster --cluster ${cluster_name} --output json | jq 'del( .["version", "openshift-version"])' %{ if debug == true }| tee cluster_status_at_install.json%{ endif}
else
    echo "Initial cluster creation command failed and returned $?"
fi